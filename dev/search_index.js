var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TuringCallbacks\nDocTestSetup  = quote\n    using TuringCallbacks\nend","category":"page"},{"location":"#TuringCallbacks","page":"Home","title":"TuringCallbacks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As the package is not yet officially released, the package has to be added from the GitHub repository:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\npkg> add https://github.com/torfjelde/TuringCallbacks.jl","category":"page"},{"location":"#Visualizing-sampling-on-the-fly","page":"Home","title":"Visualizing sampling on-the-fly","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TBCallback is a wrapper around TensorBoardLogger.TBLogger which can be used to create a callback compatible with Turing.sample.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To actually visualize the results of the logging, you need to have installed tensorflow. If you do not have tensorflow installed, it should hopefully be sufficient to run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pip3 install tensorflow","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then you can start up the TensorBoard:","category":"page"},{"location":"","page":"Home","title":"Home","text":"python3 -m tensorboard.main --logdir tensorboard_logs/run","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now we're ready to actually write some Julia code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following snippet demonstrates the usage of TBCallback on a simple model.  This will write a set of statistics at each iteration to an event-file compatible with Tensorboard:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@model function demo(x)\n    s ~ InverseGamma(2, 3)\n    m ~ Normal(0, √s)\n    for i in eachindex(x)\n        x[i] ~ Normal(m, √s)\n    end\nend\n\nxs = randn(100) .+ 1;\nmodel = demo(xs);\n\n# Number of MCMC samples/steps\nnum_samples = 50_000\n\n# Sampling algorithm to use\nalg = NUTS(0.65)\n\n# Create the callback\ncallback = make_callback(TBCallback(\"tensorboard_logs/run\"), alg, num_samples)\n\n# Sample\nchain = sample(model, alg, num_samples; callback = callback)","category":"page"},{"location":"","page":"Home","title":"Home","text":"While this is sampling, you can head right over to localhost:6006 in your web browser and you should be seeing some plots!","category":"page"},{"location":"#Types-and-Functions","page":"Home","title":"Types & Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [TuringCallbacks]\nPrivate = false\nOrder = [:type, :function]","category":"page"},{"location":"#TuringCallbacks.TBCallback","page":"Home","title":"TuringCallbacks.TBCallback","text":"TBCallback(directory::String)\nTBCallback(logger::TBLogger)\n\nWraps a TensorBoardLogger.TBLogger to construct a callback to be passed to Turing.sample.\n\nSee also make_callback.\n\nFields\n\nlogger::TensorBoardLogger.TBLogger\n\n\n\n\n\n","category":"type"},{"location":"#TuringCallbacks.make_callback-Tuple{TBCallback,Turing.Inference.InferenceAlgorithm,Int64}","page":"Home","title":"TuringCallbacks.make_callback","text":"make_callback(cb::TBCallback, spl::InferenceAlgorithm, num_samples::Int; kwargs...)\n\nReturns a function which can be used as a callback in Turing.sample.\n\nKeyword arguments\n\nnum_bins::Int = 100: number of bins to use in the histogram.\nwindow::Int = min(num_samples, 1_000): size of the window to compute stats for.\nwindow_num_bins::Int = 50: number of bins to use in the histogram of the small window.\n\n\n\n\n\n","category":"method"},{"location":"#Internals","page":"Home","title":"Internals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [TuringCallbacks]\nPrivate = true\nPublic = false","category":"page"},{"location":"#TuringCallbacks.centers_to_edges-Tuple{Any}","page":"Home","title":"TuringCallbacks.centers_to_edges","text":"centers_to_edges(centers)\n\nReturns a vector of length length(centers) + 1, whose elements represents the edges of the bins, rather than the centers.\n\nThis is useful for converting something like a OnlineStats.KHist to a  StatsBase.Histogram since the former uses the centers of the bins while the latter requires the edges of the bins.\n\nExamples\n\njulia> using TuringCallbacks: OnlineStats, StatsBase, centers_to_edges\n\njulia> xs = 1.:20;\n\njulia> khist = OnlineStats.fit!(OnlineStats.KHist(10), xs)\nKHist: n=20 | value=(centers = [1.0, 3.5, 6.5, 8.5, 10.5, 12.5, 14.5, 17.0, 19.0, 20.0], counts = [1, 4, 2, 2, 2, 2, 2, 3, 1, 1])\n\njulia> centers, cnts = OnlineStats.value(khist)\n(centers = [1.0, 3.5, 6.5, 8.5, 10.5, 12.5, 14.5, 17.0, 19.0, 20.0], counts = [1, 4, 2, 2, 2, 2, 2, 3, 1, 1])\n\njulia> StatsBase.Histogram(centers_to_edges(centers), cnts, :left, false)\nStatsBase.Histogram{Int64,1,Tuple{Array{Float64,1}}}\nedges:\n  [-0.25, 2.25, 5.0, 7.5, 9.5, 11.5, 13.5, 15.75, 18.0, 19.5, 20.5]\nweights: [1, 4, 2, 2, 2, 2, 2, 3, 1, 1]\nclosed: left\nisdensity: false\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
